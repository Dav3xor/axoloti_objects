<objdefs appVersion="1.0.12">
   <obj.normal id="framptonizer" uuid="deadbeef-288e-4049-9f91-deadbeef3349">
      <sDescription>Talkbox/Vocoder patch, adapted from:  https://github.com/gerasim13/mda-VST-plug-ins/blob/master/mda-au/mda/Talkbox/talkbox.cpp</sDescription>
      <author>dvxr</author>
      <license>GPL</license>
      <helpPatch>framptonizer.axh</helpPatch>
      <inlets>
         <frac32buffer name="input1"/>
         <frac32buffer name="input2"/>
      </inlets>
      <outlets>
         <frac32buffer name="out"/>
      </outlets>
      <displays/>
      <params>
         <frac32.u.map name="wet"/>
         <frac32.u.map name="dry"/>
         <frac32.u.map name="quality"/>
      </params>
      <attribs/>
      <code.declaration><![CDATA[long BUF_MAX;

float emphasis;
long K, N, n, O, pos;
float wet, dry, FX;

float d0, d1, d2, d3, d4;
float u0, u1, u2, u3, u4;  

#define BUF_MAX 783
#define ORD_MAX 50

#define TWO_PI     6.2831f
const double BUF_MAX_SECONDS = 0.01633;
const double MIN_SUPPORTED_SAMPLE_RATE = 8000.0;

float buf0[BUF_MAX];
float buf1[BUF_MAX];
float window[BUF_MAX];
float car0[BUF_MAX];
float car1[BUF_MAX];

float dp;

float sample_rate;


long p0, p1;
float e, w, o, x, dr, fx;
float p, q, h0, h1;

void lpc(float *buf, float *car, long n, long o)
{
  float z[ORD_MAX], r[ORD_MAX], k[ORD_MAX], G, x;
  long i, j, nn=n;

  for(j=0; j<=o; j++, nn--)  //buf[] is already emphasized and windowed
  {
    z[j] = r[j] = 0.0f;
    for(i=0; i<nn; i++) r[j] += buf[i] * buf[i+j]; //autocorrelation
  }
  r[0] *= 1.001f;  //stability fix //1.0001f

  if(r[0] < 0.00001f) { for(i=0; i<n; i++) buf[i] = 0.0f; return; } 

  lpc_durbin(r, o, k, &G);  //calc reflection coeffs

  for(i=0; i<=o; i++) 
  {
    if(k[i] > 0.995f) k[i] = 0.995f; else if(k[i] < -0.995f) k[i] = -.995f; ///0.995f;
  }

  for(i=0; i<n; i++)
  {
    x = G * car[i];
    for(j=o; j>0; j--)  //lattice filter
    { 
      x -= k[j] * z[j-1];
      z[j] = z[j-1] + k[j] * x;
    }
    buf[i] = z[0] = x;  //output buf[] will be windowed elsewhere
  }
}


void lpc_durbin(float *r, int p, float *k, float *g)
{
  int i, j;
  float a[ORD_MAX], at[ORD_MAX], e=r[0];

  for(i=0; i<=p; i++) a[i] = at[i] = 0.0f; //probably don't need to clear at[] or k[]

  for(i=1; i<=p; i++) 
  {
    k[i] = -r[i];

    for(j=1; j<i; j++) 
    { 
      at[j] = a[j];
      k[i] -= a[j] * r[i-j]; 
    }
    if(fabsf(e) < 1.0e-20f) { e = 0.0f;  break; }
    k[i] /= e;

    a[i] = k[i];
    for(j=1; j<i; j++) a[j] = at[j] + k[i] * at[i-j];

    e *= 1.0f - k[i] * k[i];
  }

  if(e < 1.0e-20f) e = 0.0f;
  *g = (float)_VSQRTF(e);
}]]></code.declaration>
      <code.init><![CDATA[N = 1;

// reset state
pos = K = 0;
emphasis = 0.0f;
FX = 0.0f;

u0 = u1 = u2 = u3 = u4 = 0.0f;
d0 = d1 = d2 = d3 = d4 = 0.0f;

memset(buf0, 0, BUF_MAX * sizeof(float));
memset(buf1, 0, BUF_MAX * sizeof(float));
memset(window, 0, BUF_MAX * sizeof(float));
memset(car0, 0, BUF_MAX * sizeof(float));
memset(car1, 0, BUF_MAX * sizeof(float));

dp = TWO_PI / (float)BUF_MAX;
n  = BUF_MAX;

sample_rate = 48000;

p = 0.0f;
for (int n=0; n<BUF_MAX; n++)
{
  window[n] = 0.5f - 0.5f * (float)cosf(p);
  p += dp;
}]]></code.init>
      <code.krate><![CDATA[O = (long)((0.0001f + 0.000004f * 90.0f) * sample_rate);


  

  wet = 0.00707f * (q27_to_float(param_wet)*1.5625);  wet *= wet;
  dry = 0.01410f * (q27_to_float(param_dry)*1.5625);  dry *= dry;

  p0 = pos;
  p1 = (pos + N/2) % N;
  e  =emphasis;
  fx =FX;
  h0=0.3f;
  h1=0.77f;

  long i;
  for (i=0; i<BUFSIZE; i++)
  {
    o = q27_to_float(inlet_input1[i]);
    x = q27_to_float(inlet_input2[i]);
    dr = o;

    p = d0 + h0 *  x; d0 = d1;  d1 = x  - h0 * p;
    q = d2 + h1 * d4; d2 = d3;  d3 = d4 - h1 * q;
    d4 = x;
    x = p + q;

    if(K++)
    {
       K = 0;
       car0[p0] = car1[p1] = x; //carrier input
       x = o - e;  e = o;  //6dB/oct pre-emphasis

       w = window[p0]; fx = buf0[p0] * w;  buf0[p0] = x * w;  //50% overlapping hanning windows
       if(++p0 >= N) { lpc(buf0, car0, N, O);  p0 = 0; }

       w = 1.0f - w;  fx += buf1[p1] * w;  buf1[p1] = x * w;
       if(++p1 >= N) { lpc(buf1, car1, N, O);  p1 = 0; }
    }

    p = u0 + h0 * fx; u0 = u1;  u1 = fx - h0 * p;
    q = u2 + h1 * u4; u2 = u3;  u3 = u4 - h1 * q;  
    u4 = fx;
    x = p + q;

    o = wet * x + dry * dr;
    outlet_out[i] = float_to_q27(o);
    //outlet_out[i] = inlet_input1[i];
  }
  emphasis = e;
  pos = p0;
  FX = fx;]]></code.krate>
   </obj.normal>
</objdefs>